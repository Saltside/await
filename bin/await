#!/usr/bin/env bash

set -euo pipefail

await() {
	local retries="${1}" counter=0
	shift

	while [ "${counter}" -lt "${retry}" ]; do
		if "$@"; then
			echo "OK!"
			return 0
		else
			((counter++))
		fi
	done

	echo "failed with ${counter} retry(s)." 1>&2
	return 1
}

main() {
	local retry=60

	while getopts ":r:" opt; do
		case "${opt}" in
			r)
				retry="${OPTARG}"
				;;
			\?)
				echo "Invalid option: -${OPTARG}" 1>&2
				return 1
				;;
			:)
				echo "Option -${OPTARG} requires an argument." 1>&2
				return 1
				;;
		esac
	done

	shift $((OPTIND-1))

	local uri="${1:-}"
	shift

	case "${uri}" in
		https?://*)
			await "${retries}" -- curl -s fail "$@"
			;;
		mongodb://*)
			await "${retries}" -- mongo_check "$@"
			;;
		redis://*)
			await "${retries}" -- redis_check "$@"
			;;
		dynamodb://*)
			await "${retries}" -- dynamoddb_check "$@"
			;;
		mysql://*)
			await "${retries}" -- mysql_check "$@"
			;;
		memcached://*)
			await "${retries}" -- memcached_check "$@"
			;;
		*)
			echo "Unknown resource." 1>&2
			echo "Usage: " 1>&2
			# TODO: to be filled later
			return 1
	esac
}

main "$@"
