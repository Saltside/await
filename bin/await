#!/usr/bin/env bash

set -euo pipefail

usage() {
	cat <<'EOF'

USAGE: await [-r RETRIES] [ URI | "cmd" ] [ -- EXTRA_OPTS ]

Forms:

	await [ -r RETRIES ] http://host:port -- [ CURL_OPTS ]
	await [ -r RETRIES ] https://host:port -- [ CURL_OPTS ]
	await [ -r RETRIES ] mongodb://host:port -- [ -t SELECTION_TIMEOUT ]
	await [ -r RETRIES ] redis://host:port -- [ -t CONNECTION_TIMEOUT ]
	await [ -r RETRIES ] memcached://host:port -- [ -t CONNECTION_TIMEOUT ]
	await [ -r RETRIES ] mysql://user:password@host:port -- [ -t CONNECTION_TIMEOUT ]
	await [ -r RETRIES ] dynamodb://host:port -- [ -t CONNECTION_TIMEOUT ]
	await [ -r RETRIES ] cmd -- COMMAND [ OPTIONS ]
EOF
}

await() {
	local retries="${1}" counter=0
	shift 2

	while [ "${counter}" -lt "${retries}" ]; do
		if "$@"; then
			echo "OK!"
			return 0
		else
			# NOTE: The pre-increment usage. This makes the arithmatic expression
			# always exit 0. The post-increment form exits non-zero when counter
			# is zero. More information here: http://wiki.bash-hackers.org/syntax/arith_expr#arithmetic_expressions_and_return_codes
			((++counter))
		fi
	done

	echo "failed with ${counter} retry(s)." 1>&2
	return 1
}

main() {
	local retries=60

	while getopts ":r:" opt; do
		case "${opt}" in
			r)
				retries="${OPTARG}"
				;;
			\?)
				echo "Invalid option: -${OPTARG}" 1>&2
				return 1
				;;
			:)
				echo "Option -${OPTARG} requires an argument." 1>&2
				return 1
				;;
		esac
	done

	shift $((OPTIND-1))

	local uri="${1:-}"
	shift

	# Shift off the -- used to separate await options from per-case connection
	# options. optparse does not do this in our case because we mix positional
	# and flag arguments.
	if [ "${1:-}" = '--' ]; then
		shift
	fi

	case "${uri}" in
		http://*|https://*)
			await "${retries}" -- curl -s --fail "$@" "${uri}"
			;;
		mongodb://*)
			await "${retries}" -- mongo_check "$@" "${uri}"
			;;
		redis://*)
			await "${retries}" -- redis_check "$@" "${uri}"
			;;
		dynamodb://*)
			await "${retries}" -- dynamodb_check "$@" "${uri}"
			;;
		mysql://*)
			await "${retries}" -- mysql_check "$@" "${uri}"
			;;
		memcached://*)
			await "${retries}" -- memcached_check "$@" "${uri}"
			;;
		cmd)
			if [ $# -ne 0 ]; then
				await "${retries}" -- "$@"
			else
				usage 1>&2
				return 1
			fi
			;;
		*)
			usage 1>&2
			return 1
			;;
	esac
}

main "$@"
