#!/usr/bin/env bash

set -euo pipefail

main() {

	local subcommand="${1:-}"
	shift

	case "${subcommand}" in
		http)
			local counter=0 retry=3

			while getopts ":r:" opt; do
				case "${opt}" in
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG}" 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if curl -s --fail "$@"; then
					echo "OK!"
					return 0
				else
					((counter++))
				fi
			done

			echo "http request failed with ${counter} retry(s)." 1>&2
			return 1
			;;

		mongodb)
			local counter=0 retry=3

			while getopts ":r:" opt; do
				case "${opt}" in
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG} for mongo connection check." 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if mongo_check "$@"; then
					return 0
				else
					((counter++))
				fi
			done

			echo "mongo connection request failed with ${counter} retry(s)" 1>&2
			return 1
			;;

		redis)
			local counter=0 retry=3

			while getopts ":r:" opt; do
				case "${opt}" in
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG} for redis connection check." 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if redis_check "$@"; then
					return 0
				else
					((counter++))
				fi
			done

			echo "Redis connection request failed with ${counter} retry(s)" 1>&2
			return 1
			;;

		dynamodb)
			local retry=3 counter=0
			while getopts ":r:" opt; do
				case "${opt}" in
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG} for dynamodb connection check." 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if aws dynamodb "$@" list-tables > /dev/null; then
					echo "Dynamodb connection request succeeded."
					return 0
				else
					((counter++))
				fi
			done

			echo "Dynamodb connection request failed with ${counter} retry(s)." 1>&2
			return 1
			;;

		mysql)
			local counter=0 retry=3

			while getopts ":r:" opt; do
				case "${opt}" in
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG} for mysql connection check." 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if mysql_check "$@"; then
					return 0
				else
					((counter++))
				fi
			done

			echo "Mysql connection request failed with ${counter} retry(s)." 1>&2
			return 1
			;;

		memcached)
			local host port=11211 counter=0 retry=3

			while getopts ":h:p:r:" opt; do
				case "${opt}" in
					h)
						host="${OPTARG}"
						;;
					p)
						port="${OPTARG}"
						;;
					r)
						retry="${OPTARG}"
						;;
					\?)
						echo "Invalid option: -${OPTARG} for memcached connection check." 1>&2
						return 1
						;;
					:)
						echo "Option -${OPTARG} requires an argument." 1>&2
						return 1
						;;
				esac
			done

			shift $((OPTIND-1))

			while [ "${counter}" -lt "${retry}" ]; do
				if echo stats | nc "${host}" "${port}" > /dev/null; then
					echo "Memcached connection request succeeded."
					return 0
				else
					((counter++))
				fi
			done

			echo "Memcached connection request failed with ${counter} retry(s)." 1>&2
			return 1
			;;

		*)
			echo "Unknown resource." 1>&2
			echo "Usage: " 1>&2
			# TODO: to be filled later
			return 1

	esac
}

main "$@"
